epc2$Date <- as.Date(epc2$Date, format="%d/%m/%Y")
epc2$Weekday <- weekdays(epc2$Date, abbreviate=TRUE)
head(epc2)
plot(epc2$Global_active_power, epc2$Weekday)
plot(epc2$Weekday, epc2$Global_active_power)
with(epc2, plot(Time, Global_active_power))
if(!file.exists("./data")) {dir.create("./data")}
zipURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
#Windows:
download.file(zipURL, destfile="./data/EPCdata.zip")
#Mac:
download.file(zipURL, destfile="./data/EPCdata.zip", method="curl")
dateDownloaded <- date()
## unzip data
unzip("./data/EPCdata.zip", exdir="./data")
## read into R
epc <- read.table("./data/household_power_consumption.txt", header = TRUE, sep = ";")
## subset the days of interest (2007-02-01 and 2007-02-02)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
plot(epc2$time ~ epc2$Global_active_power)
names(epc2)
plot(epc2$Time ~ epc2$Global_active_power)
?lines
?strptime
?paste
tester <- paste(epc2$Date, epc2$Time, sep="-")
head(tester)
tail(tester)
tester2 <- strptime(tester, format="%d/%m/%Y-%H:%M:%S")
str(tester2)
head(tester2)
tester3 <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
identical(tester2, tester3)
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
epc2$Global_active_power <- as.numeric(as.character(epc2$Global_active_power))
plot(epc2$Global_active_power ~ epc2$DateTime)
plot(epc2$Global_active_power, epc2$DateTime)
plot(epc2$DateTime, epc2$Global_active_power, type="l")
plot(epc2$DateTime, epc2$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
## open PNG graphics device with specified dimensions
png(file = "plot2.png", width = 480, height = 480, units = "px")
## plot
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
## close graphics device
dev.off()
rm(epc2)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
str(epc2)
is.numeric(epc2$Sub_metering_3)
is.numeric(epc2$Sub_metering_2)
epc2$Sub_metering_1 <- as.numeric(as.character(epc2$Sub_metering_1))
epc2$Sub_metering_2 <- as.numeric(as.character(epc2$Sub_metering_2))
is.numeric(epc2$Sub_metering_2)
is.numeric(epc2$Sub_metering_1)
str(epc2)
sum(epc2$Sub_metering_1)
sum(epc2$Sub_metering_3)
sum(epc2$Sub_metering_2)
plot(epc2$DateTime, epc2$Sub_metering_1, type="n")
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
plot(epc2$DateTime, epc2$Sub_metering_1, type="n")
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
plot(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
plot(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
line(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
?line
?lines
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
?legend
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#empty frame with labels:
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
#black sub-metering 1 line:
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
#red sub-metering 2 line:
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
#blue sub-metering 3 line:
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
#legend:
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
rm(epc2)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
## get datetimes as POSIX; sub-metering values as numeric where they aren't already
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
epc2$Sub_metering_1 <- as.numeric(as.character(epc2$Sub_metering_1))
epc2$Sub_metering_2 <- as.numeric(as.character(epc2$Sub_metering_2))
## open PNG graphics device with specified dimensions
png(file = "plot3.png", width = 480, height = 480, units = "px")
## plot
#empty frame with labels:
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
#black sub-metering 1 line:
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
#red sub-metering 2 line:
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
#blue sub-metering 3 line:
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
#legend:
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## close graphics device
dev.off()
rm(epc2)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
str(epc2)
testvolt <- as.numeric(as.character(epc2$Voltage))
head(testvolt)
is.numeric(testvolt)
testgrp <- as.numeric(as.character(epc2$Global_reactive_power))
head(testgrp)
plot(epc2$DateTime, epc2$voltage, type="l",
ylab="Voltage", xlab="datetime")
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
epc2$Global_active_power <- as.numeric(as.character(epc2$Global_active_power))
epc2$Voltage <- as.numeric(as.character(epc2$Voltage))
epc2$Sub_metering_1 <- as.numeric(as.character(epc2$Sub_metering_1))
epc2$Sub_metering_2 <- as.numeric(as.character(epc2$Sub_metering_2))
epc2$Global_reactive_power <- as.numeric(as.character(epc2$Global_reactive_power))
plot(epc2$DateTime, epc2$voltage, type="l",
ylab="Voltage", xlab="datetime")
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(epc2$DateTime, epc2$Voltage, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(epc2$DateTime, epc2$Voltage, type="l",
ylab="Voltage", xlab="datetime")
plot(epc2$DateTime, epc2$Global_reactive_power, type="l",
ylab="Global_reactive_power", xlab="datetime")
#set up 2x2 multi-plot space, to be filled in column-wise
par(mfcol=c(2,2))
#upper left plot (global active power):
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
#lower left plot (energy sub metering):
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#upper right plot (voltage):
plot(epc2$DateTime, epc2$Voltage, type="l", ylab="Voltage", xlab="datetime")
#lower right plot (global reactive power):
plot(epc2$DateTime, epc2$Global_reactive_power, type="l",
ylab="Global_reactive_power", xlab="datetime")
#set up 2x2 multi-plot space, to be filled in column-wise
par(mfcol=c(2,2))
#upper left plot (global active power):
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power", xlab="")
#lower left plot (energy sub metering):
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#upper right plot (voltage):
plot(epc2$DateTime, epc2$Voltage, type="l", ylab="Voltage", xlab="datetime")
#lower right plot (global reactive power):
plot(epc2$DateTime, epc2$Global_reactive_power, type="l",
ylab="Global_reactive_power", xlab="datetime")
rm(epc2)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
## variable preparation: datetimes as POSIX, Global Active Power as numeric,
## Voltage as numeric, Sub-metering as numeric where it is not already, and
## Global Reactive Power as numeric
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
epc2$Global_active_power <- as.numeric(as.character(epc2$Global_active_power))
epc2$Voltage <- as.numeric(as.character(epc2$Voltage))
epc2$Sub_metering_1 <- as.numeric(as.character(epc2$Sub_metering_1))
epc2$Sub_metering_2 <- as.numeric(as.character(epc2$Sub_metering_2))
epc2$Global_reactive_power <- as.numeric(as.character(epc2$Global_reactive_power))
## open PNG graphics device with specified dimensions
png(file = "plot4.png", width = 480, height = 480, units = "px")
## plot
#set up 2x2 multi-plot space, to be filled in column-wise
par(mfcol=c(2,2))
#upper left plot (global active power):
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power", xlab="")
#lower left plot (energy sub metering):
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
legend("topright", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#upper right plot (voltage):
plot(epc2$DateTime, epc2$Voltage, type="l", ylab="Voltage", xlab="datetime")
#lower right plot (global reactive power):
plot(epc2$DateTime, epc2$Global_reactive_power, type="l",
ylab="Global_reactive_power", xlab="datetime")
## close graphics device
dev.off()
ct <- tpfc cdl fdtt epc accp lir cdtd klp cfrp? qei qlhp qli pqeo dfg pwaf opw prti izx ndki qpk iikr irr ifca pnc dxkd ciq cafm dvk fpcadf.
ct <- "tpfc cdl fdtt epc accp lir cdtd klp cfrp? qei qlhp qli pqeo dfg pwaf opw prti izx ndki qpk iikr irr ifca pnc dxkd ciq cafm dvk fpcadf."
table(ct)
?letters
?legend
rm(epc2)
epc2 <- epc[epc$Date %in% c("1/2/2007", "2/2/2007"),]
## variable preparation: datetimes as POSIX, Global Active Power as numeric,
## Voltage as numeric, Sub-metering as numeric where it is not already, and
## Global Reactive Power as numeric
epc2$DateTime <- strptime((paste(epc2$Date, epc2$Time, sep="-")), format="%d/%m/%Y-%H:%M:%S")
epc2$Global_active_power <- as.numeric(as.character(epc2$Global_active_power))
epc2$Voltage <- as.numeric(as.character(epc2$Voltage))
epc2$Sub_metering_1 <- as.numeric(as.character(epc2$Sub_metering_1))
epc2$Sub_metering_2 <- as.numeric(as.character(epc2$Sub_metering_2))
epc2$Global_reactive_power <- as.numeric(as.character(epc2$Global_reactive_power))
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", lty="solid", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## open PNG graphics device with specified dimensions
png(file = "plot4.png", width = 480, height = 480, units = "px")
## plot
#set up 2x2 multi-plot space, to be filled in column-wise
par(mfcol=c(2,2))
#upper left plot (global active power):
plot(epc2$DateTime, epc2$Global_active_power, type="l",
ylab="Global Active Power", xlab="")
#lower left plot (energy sub metering):
plot(epc2$DateTime, epc2$Sub_metering_1, type="n", ylab="Energy sub metering", xlab="")
lines(epc2$DateTime, epc2$Sub_metering_1, type="l", col="black")
lines(epc2$DateTime, epc2$Sub_metering_2, type="l", col="red")
lines(epc2$DateTime, epc2$Sub_metering_3, type="l", col="blue")
legend("topright", bty="n", lty="solid", col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#upper right plot (voltage):
plot(epc2$DateTime, epc2$Voltage, type="l", ylab="Voltage", xlab="datetime")
#lower right plot (global reactive power):
plot(epc2$DateTime, epc2$Global_reactive_power, type="l",
ylab="Global_reactive_power", xlab="datetime")
## close graphics device
dev.off()
rm(list=ls())
?aes
library(ggplot2)
?aes
?expression
?geom_smooth
?linetype
?aes
library(plyr)
library(reshape2)
rescale01 <- function(x) (x - min(x)) / diff(range(x))
ec_scaled <- data.frame(
date = economics$date,
colwise(rescale01)(economics[, -(1:2)]))
ecm <- melt(ec_scaled, id = "date")
qplot(date, value, data = ecm, geom = "line", linetype = variable)
seq(0,1, length=4)
?cut
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lpoints
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
head(movies)
?info
?movies
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth="loess")
?stats_smooth
?qplot
install.packages("markdown")
install.packages("knitr")
install.packages("slidify")
install.packages("Slidify")
?par
?xtable
??xtable
library(knitr)
?xtable
install.packages("xtable")
?xtable
library(xtable)
?xtable
zipURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
zipURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("./data")) {dir.create("./data")}
#Windows:
download.file(zipURL, destfile="./data/AMdata.zip")
#Mac:
download.file(zipURL, destfile="./data/AMdata.zip", method="curl")
dateDownloaded <- date()
## unzip
unzip("./data/AMdata.zip", exdir="./data")
am <- read.csv("./data/activity.csv")
head(am)
tail(am)
str(am)
?read.csv
classes <- c("integer", "Date", "integer")
am <- read.csv("./data/activity.csv", colClasses = classes)
str(am)
levels(am$steps)
summary(am$steps)
library(ggplot2)
?qplot
qplot(am$steps)
?qplot
setwd("C:/Users/570815/Dropbox/Coursera/R Working Directory/RepData_PeerAssessment1")
zipURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
if(!file.exists("./data")) {dir.create("./data")}
#Windows:
download.file(zipURL, destfile="./data/AMdata.zip")
#Mac:
download.file(zipURL, destfile="./data/AMdata.zip", method="curl")
dateDownloaded <- date()
## unzip
unzip("./data/AMdata.zip", exdir="./data")
am <- read.csv("./data/activity.csv", colClasses = classes)
```{r, results='hide', warning=FALSE}
?suppress.error
?suppress.errors
?subset
library(ggplot2)
cleansteps <- na.omit(am$steps)
qplot(cleansteps)
?na.omit
cleansteps
length(cleansteps)
length(am$steps)
length(is.na(am$steps)[TRUE])
length(is.na(am$steps)[am$steps==TRUE])
length(is.na(am$steps)[am$steps==TRUE]) + length(cleansteps)
?qplot
am2 <- complete.cases(am)
str(am2)
am2 <- am[complete.cases(am)]
am2 <- am[complete.cases(am)]
am2 <- am[complete.cases(am),]
str(am2)
head(am2$date)
tail(am2$date)
am2 <- am[complete.cases(am),]
qplot(steps, data=am2, main="Step frequencies", xlab="Steps per interval",
ylab="Count")
qplot(steps, Date, data=am2, main="Step frequencies", xlab="Steps per interval",
ylab="Count")
qplot(steps, date, data=am2, main="Step frequencies", xlab="Steps per interval",
ylab="Count")
qplot(date, steps, data=am2, main="Step frequencies", xlab="Steps per interval",
ylab="Count")
?by
dates <- levels(as.factor(am2$date))
dates
dsteps <- by(am2, dates, sum)
dsteps <- by(am2, dates, sum(am2$steps))
?sapply
library(reshape2)
?melt
molten <- melt(am2)
head(molten)
head(am2)
molten <- melt(am, na.rm=TRUE, id="interval")
head(molten)
molten <- melt(am, na.rm=TRUE, id=c("date", "interval")
)
molten <- melt(am, na.rm=TRUE, id=c("date", "interval"))
head(molten)
?dcast
test <- dcast(molten, steps ~ date)
test <- dcast(molten, variable ~ date)
test <- dcast(molten, variable ~ date, sum)
head(test)
qplot(test, main="daily steps", xlab="date", ylab="steps")
?qplot
str(test)
qplot(as.numeric(test), main="daily steps", xlab="date", ylab="steps")
stepsByDay <- dcast(molten, variable ~ date, sum)
test <- cbind(as.character(names(stepsByDay)), as.numeric(stepsByDay))
str(test)
head(test)
test <- cbind(Date = as.Date(names(stepsByDay[2:length(stepsByDay)])), Steps = as.numeric(stepsByDay[2:length(stepsByDay)]))
head(test)
test <- cbind(Date = as.Date(as.character(names(stepsByDay[2:length(stepsByDay)]))), Steps = as.numeric(stepsByDay[2:length(stepsByDay)]))
head(test)
test <- cbind(Date = as.Date(levels(stepsByDay[2:length(stepsByDay)])), Steps = as.numeric(stepsByDay[2:length(stepsByDay)]))
test <- cbind(Date = as.Date(names(stepsByDay[2:length(stepsByDay)])), Steps = as.numeric(stepsByDay[2:length(stepsByDay)]))
head(test)
test <- cbind(Date = as.Date(levels(as.factor(stepsByDay[2:length(stepsByDay)]))), Steps = as.numeric(stepsByDay[2:length(stepsByDay)]))
test
stepsByDay
?dcast
length(stepsByDay)
length(names(as.factor(am$date)))
names(as.factor(am$date))
length(levels(as.factor(am$date)))
am2 <- am[complete.cases(am),]
length(levels(as.factor(am2$date)))
test2 <- as.date(levels(as.factor(am2$date)))
test2 <- as.Date(levels(as.factor(am2$date)))
test2
identical(test2, am2$date)
str(test2)
str(am2)
am2$date
identical(test2, levels(am2$date))
levels(am2$date)
str(am2)
dates <- as.Date(levels(as.factor(am2$date)))
data <- cbind(dates, stepsByDay[2:length(stepsByDay)])
data
stepsByDay
data <- rbind(dates, stepsByDay[2:length(stepsByDay)])
data
str(stepsByDay)
stepSum <- NULL
for(i in 1:length(dates)) {
stepSum[i] <- sum(am2$steps%in%am2[am2Date==dates[i]])
}
stepSum <- NULL
for(i in 1:length(dates)) {
stepSum[i] <- sum(am2$steps%in%am2[am2$date==dates[i]])
}
stepSum <- NULL
for(i in 1:length(dates)) {
stepSum[i] <- sum(am2[am2$date==dates[i],]$date)
}
stepSum <- NULL
for(i in 1:length(dates)) {
stepSum[i] <- sum(am2[am2$date==dates[i],]$steps)
}
stepSum
dates
cbind(dates, stepSum)
?data.frame
df <- data.frame(Date=dates, Steps=stepSum)
df
qplot(df$Steps)
qplot(df)
qplot(df$Date, df$Steps)
?qplot
qplot(df$Date, df$Steps, geom="histogram")
qplot(df$Date, stat="identity")
where(df, qplot(Date, stat="identity"))
?where
qplot(where(df, Date, stat="identity")
)
?qplot
head(df)
qplot(data=df, Steps, stat="identity")
?plot
plot(df$Date, df$Steps, type="h")
qplot(data=df, Steps, breaks=Date)
qplot(data=df, Steps, breaks="Date")
qplot(data=df, Steps, breaks=levels(Date))
qplot(data=df, Steps, breaks=df$Date)
?qplot
qplot(data=df, Steps, breaks=aes(Date))
qplot(data=df, Steps, aes(x=Date)
)
qplot(data=df, Date, stat="bin")
qplot(data=df, Date, stat="identity")
?stat
?qplot
?ggplot
ggplot(df, aes(Date, Steps))
ggplot(df, aes(Date, Steps)) + geom_bar(Steps)
?gepm_bar
?geom_bar
ggplot(df, aes(Date, Steps)) + geom_bar(df$Steps)
?hist
hist(df$Steps, breaks=df$Date)
hist(df$Steps, breaks=as.factor(df$Date))
as.factor(df$Date)
hist(df$Steps, breaks=levels(as.factor(df$Date)))
?aggregate
tester <- aggregate(am2, by="date")
tester <- aggregate(am2, by="date", FUN=sum)
tester <- aggregate(am2, by=date, FUN=sum)
tester <- aggregate(am2, by=am2$date, FUN=sum)
head(am2)
?as.list
tester <- aggregate(am2, by=as.list(am2$date), FUN=sum)
tester <- aggregate(am2$steps, by=am2$date, FUN=sum)
tester <- aggregate(am2$steps, by=as.list(am2$date), FUN=sum)
tester <- aggregate(am2$steps, list(Date = am2$date), sum)
head(tester)
tester <- aggregate(Steps = am2$steps, list(Date = am2$date), sum)
tester <- aggregate(Steps = am2$steps, list(Date = am2$date), FUN = sum)
tester
qplot(tester)
qplot(tester$x)
qplot(tester$date)
qplot(tester$Date)
qplot(tester$Date, tester$x)
qplot(tester$Date, tester$x, geom="bar")
qplot(tester$Date, tester$x, geom="bar", stat="identity")
am2 <- am[complete.cases(am),]
sumByDate <- aggregate(am2$steps, list(Date = am2$date), sum)
qplot(sumByDate$Date, sumByDate$x, geom="bar", stat="identity", main="Steps
(sum per day)", xlab="Date", ylab="Count")
